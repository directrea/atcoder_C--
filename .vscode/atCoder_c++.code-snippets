{
	// Place your atcoder_C++ ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		"cpp template": {
		"scope": "cpp",
		"prefix": "cpp template",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
			"#define rep2(i, s, n) for (int i = (s); i < (int)(n); i++)",
			"#define all(a) (a).begin(), (a).end()",
			"#define endl \"\\n\"",
			"using ll = long long;",
			"template <class T>",
            "void print(T out, string end = \"\\n\") {",
            "  cout << out << end;",
            "}",
            "template <class T>",
            "void print(vector<T> v, string sep = \" \") {",
            "  for (unsigned long i = 0; i < v.size(); i++) {",
            "    if (i == 0)",
            "      cout << v[i];",
            "    else",
            "      cout << sep << v[i];",
            "  }",
            "  cout << endl;",
            "}",
			"",
			"int main(){",
			"  $1\n",
			"  return 0;",
			"}",
		],
		"description": "Log output to console"
	},
	"vector<>":{
		"scope":"cpp",
		"prefix": "v",
		"body": "vector<$1>",
	},
	"vector<vector<>>":{
		"scope":"cpp",
		"prefix": "vv",
		"body": "vector<vector<$1>> $2",
	}

}