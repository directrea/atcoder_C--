{
	// Place your atcoder_C++ ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cpp template": {
		"scope": "cpp",
		"prefix": "cpp template",
		"body": [
			"#include <bits/stdc++.h>",
            "using namespace std;",
            "#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
            "#define rep2(i, s, n) for (int i = (s); i < (int)(n); i++)",
            "#define all(a) (a).begin(), (a).end()",
            "#define vec vector",
            "using ll = long long;",
			"template <class T> void print(T out, string end = \"\\n\") { cout << out << end; }"
			"template <class T> void print(vec<T> &v) { rep(i, v.size()) cout << v[i] << \" \\n\"[i == (int)v.size() - 1]; }"
            "",
            "int main() {",
            "	$1\n",
            "	return 0; "
			"}"
		],
		"description": "Log output to console"
	},
	"if(ansb)":{
		"scope":"cpp",
		"prefix":"if(ansb)",
		"body":[
			"if (ansb)",
			"\tprint(\"Yes\");",
			"else",
			"\tprint(\"No\");",
		]
	},
	"in":{
		"scope":"cpp",
		"prefix":"in",
		"body":[
			"auto in = [&](unsigned long r, unsigned long c, long rsize, long csize) -> bool {"
			"\treturn r < rsize && c < csize;"
			"};"
		],
		"description": "配列の範囲判定"
	}
}
